// Import necessary modules and interfaces
import { Types } from 'mongoose';
import { NotificationDataAccess } from '../../data/user.notification.dataAccess';
import { handleError } from '../../../../utils/handleError.utils';

// Interface for Notification document
export interface INotification extends Document {
  type: string;
  userName: string;
  userId: Types.ObjectId;
  read: boolean;
  timeStamp: Date;
  postId: Types.ObjectId;
  profilePicture: string;
}

// Interface for NotificationMarkAsReadResponse
export interface INotificationMarkAsReadResponse {
  success: boolean;
  message: string;
  updatedNotification: INotification;
}

// Class to handle notification use cases
export class NotificationUseCase {
  private notificationDataAccess: NotificationDataAccess;

  // Constructor to initialize NotificationDataAccess
  constructor() {
    this.notificationDataAccess = new NotificationDataAccess();
  }

  /**
   * Method to add notification to user.
   *
   * @param userId - The ID of the user who interacts.
   * @param type - The type of interaction.
   * @param postId - The ID of the post interacted with.
   * @returns added notification
   * @throws Error if there's an issue while adding the notification.
   */
  async addNotification(userId: Types.ObjectId, type: string, postId: Types.ObjectId, postUserId: string) {
    try {
      return await this.notificationDataAccess.addNotification(userId, type, postId, postUserId);
    } catch (e: any) {
      console.error(`Error occurred while adding notification: ${e.message}`);
      handleError(e.message);
    }
  }

  /**
   * Method to get notifications of user.
   *
   * @param userId - The ID of the user
   * @returns Notifications of the user
   * @throws Error if there's an issue while fetching notifications.
   */
  async getNotifications(userId: string): Promise<INotification[]> {
    try {
      return await this.notificationDataAccess.getNotifications(userId);
    } catch (e: any) {
      console.log(`Error occurred while fetching notifications ${e.message}`);
      handleError(e.message);
      return [];
    }
  }

  /**
   * Method to mark notification as read.
   *
   * @param userId - The ID of the user.
   * @param notificationId - The ID of the notification.
   * @returns MarkAsReadResponse
   */
  async markAsRead(userId: string, notificationId: string): Promise<INotificationMarkAsReadResponse> {
    return await this.notificationDataAccess.markAsRead(userId, notificationId);
  }

  /**
   * Method to get the count of notifications.
   *
   * @param userId - User ID to get the notifications.
   * @returns Notifications count
   */
  async getNotificationsCount(userId: Types.ObjectId) {
    return await this.notificationDataAccess.getNotificationsCount(userId);
  }
}
